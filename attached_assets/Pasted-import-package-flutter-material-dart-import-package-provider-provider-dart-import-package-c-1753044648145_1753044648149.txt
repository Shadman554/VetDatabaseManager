import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../providers/theme_provider.dart';
import '../providers/language_provider.dart';
import '../providers/history_provider.dart';
import '../models/note.dart';
import 'package:flutter/services.dart';

class NoteDetailsPage extends StatefulWidget {
  final Note note;
  final bool isEditable;

  const NoteDetailsPage({Key? key, required this.note, this.isEditable = false}) : super(key: key);

  @override
  State<NoteDetailsPage> createState() => _NoteDetailsPageState();
}

class _NoteDetailsPageState extends State<NoteDetailsPage> {
  late TextEditingController _textController;
  bool _isEditing = false;
  bool _showPreview = false;

  @override
  void initState() {
    super.initState();
    _textController = TextEditingController(text: widget.note.description ?? '');
    
    // Add to history after frame is built
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<HistoryProvider>(context, listen: false)
          .addToHistory(widget.note.name, 'note', 'Viewed note details');
    });
  }

  @override
  void dispose() {
    _textController.dispose();
    super.dispose();
  }

  // Method to format text with proper line breaks and structure
  String _formatText(String text) {
    // Replace ### and * with bullet points for better readability
    text = text.replaceAll('###', '\n• ');
    // Handle asterisk bullets at the start of a line
    text = text.replaceAll(RegExp(r'(^|\n)\*\s*'), '\n• ');
    
    // Clean up multiple line breaks
    text = text.replaceAll(RegExp(r'\n\s*\n'), '\n\n');
    
    // Remove leading/trailing whitespace
    text = text.trim();
    
    return text;
  }

  // Method to create styled text with better formatting
  Widget _buildFormattedText(String content, ThemeProvider themeProvider) {
    List<Widget> widgets = [];
    
    // Split content by ** to separate headings from regular text
    List<String> parts = content.split('**');
    
    for (int i = 0; i < parts.length; i++) {
      String part = parts[i].trim();
      if (part.isEmpty) continue;
      
      // Even indices are regular text, odd indices are headings
      if (i % 2 == 0) {
        // Regular text - process ### for bullet points
        String formattedText = _formatText(part);
        List<String> lines = formattedText.split('\n');
        
        for (String line in lines) {
      final trimmed = line.trim();
      if (trimmed.isEmpty) {
        widgets.add(SizedBox(height: 8));
        continue;
      }

      // Sub-heading starting with ##
      if (trimmed.startsWith('##')) {
        final subHeading = trimmed.replaceFirst(RegExp(r'^##\s*'), '');
        widgets.add(
          Padding(
            padding: EdgeInsets.only(top: 12, bottom: 6),
            child: Text(
              subHeading,
              style: TextStyle(
                fontSize: 17,
                fontWeight: FontWeight.w600,
                color: themeProvider.isDarkMode ? Colors.blue[200] : Colors.blue[600],
                height: 1.5,
              ),
            ),
          ),
        );
        continue;
      }

      // Bullet points starting with • or *
      if (trimmed.startsWith('•') || trimmed.startsWith('*')) {
        final bulletText = trimmed.startsWith('*')
            ? trimmed.replaceFirst(RegExp(r'^\*\s*'), '• ')
            : trimmed;
        widgets.add(
          Padding(
            padding: EdgeInsets.only(left: 16, bottom: 4),
            child: Text(
              bulletText,
              style: TextStyle(
                fontSize: 16,
                color: themeProvider.isDarkMode ? Colors.grey[400] : Colors.black87,
                height: 1.6,
              ),
            ),
          ),
        );
        continue;
      }
          if (line.trim().isEmpty) {
            widgets.add(SizedBox(height: 8));
            continue;
          }
          
          // Style bullet points
          if (line.trim().startsWith('•')) {
            widgets.add(
              Padding(
                padding: EdgeInsets.only(left: 16, bottom: 4),
                child: Text(
                  line,
                  style: TextStyle(
                    fontSize: 16,
                    color: themeProvider.isDarkMode 
                      ? Colors.grey[400] 
                      : Colors.black87,
                    height: 1.6,
                  ),
                ),
              ),
            );
          } else {
            // Regular text
            widgets.add(
              Padding(
                padding: EdgeInsets.only(bottom: 4),
                child: Text(
                  line,
                  style: TextStyle(
                    fontSize: 16,
                    color: themeProvider.isDarkMode 
                      ? Colors.grey[400] 
                      : Colors.black87,
                    height: 1.6,
                  ),
                ),
              ),
            );
          }
        }
      } else {
        // This is a heading (text between **)
        widgets.add(
          Padding(
            padding: EdgeInsets.only(top: 16, bottom: 8),
            child: Text(
              part,
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: themeProvider.isDarkMode 
                  ? Colors.blue[300] 
                  : Colors.blue[700],
                height: 1.4,
              ),
            ),
          ),
        );
      }
    }
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: widgets,
    );
  }

  // Method to insert formatting at cursor position
  void _insertFormatting(String format) {
    final text = _textController.text;
    final selection = _textController.selection;
    
    if (selection.isValid) {
      final newText = text.replaceRange(
        selection.start,
        selection.end,
        format,
      );
      
      _textController.text = newText;
      
      // Move cursor to appropriate position
      int cursorPosition;
      if (format == '****') {
        cursorPosition = selection.start + 2; // Place cursor between **
      } else {
        cursorPosition = selection.start + format.length;
      }
      
      _textController.selection = TextSelection.collapsed(offset: cursorPosition);
    }
  }

  // Method to wrap selected text with formatting
  void _wrapSelection(String startFormat, String endFormat) {
    final text = _textController.text;
    final selection = _textController.selection;
    
    if (selection.isValid && selection.start != selection.end) {
      final selectedText = text.substring(selection.start, selection.end);
      final newText = text.replaceRange(
        selection.start,
        selection.end,
        '$startFormat$selectedText$endFormat',
      );
      
      _textController.text = newText;
      _textController.selection = TextSelection.collapsed(
        offset: selection.start + startFormat.length + selectedText.length + endFormat.length,
      );
    }
  }

  // Formatting toolbar
  Widget _buildFormattingToolbar(ThemeProvider themeProvider) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: themeProvider.isDarkMode ? Colors.grey[800] : Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Formatting buttons
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: [
                _buildToolbarButton(
                  icon: Icons.title,
                  label: 'Heading',
                  onTap: () => _insertFormatting('****'),
                  themeProvider: themeProvider,
                ),
                SizedBox(width: 8),
                _buildToolbarButton(
                  icon: Icons.subtitles,
                  label: 'Sub-heading',
                  onTap: () => _insertFormatting('## '),
                  themeProvider: themeProvider,
                ),
                SizedBox(width: 8),
                _buildToolbarButton(
                  icon: Icons.format_list_bulleted,
                  label: 'Bullet',
                  onTap: () => _insertFormatting('* '),
                  themeProvider: themeProvider,
                ),
                SizedBox(width: 8),
                _buildToolbarButton(
                  icon: Icons.format_bold,
                  label: 'Bold',
                  onTap: () => _wrapSelection('**', '**'),
                  themeProvider: themeProvider,
                ),
                SizedBox(width: 8),
                _buildToolbarButton(
                  icon: Icons.visibility,
                  label: 'Preview',
                  onTap: () => setState(() => _showPreview = !_showPreview),
                  themeProvider: themeProvider,
                  isActive: _showPreview,
                ),
              ],
            ),
          ),
          SizedBox(height: 8),
          
          // Formatting guide
          Text(
            'Formatting Guide:',
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
              color: themeProvider.isDarkMode ? Colors.white : Colors.black87,
            ),
          ),
          SizedBox(height: 4),
          _buildFormatGuide('**Text** = Heading', themeProvider),
          _buildFormatGuide('## Text = Sub-heading', themeProvider),
          _buildFormatGuide('* Text = Bullet point', themeProvider),
          _buildFormatGuide('Regular text = Normal paragraph', themeProvider),
        ],
      ),
    );
  }

  Widget _buildToolbarButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
    required ThemeProvider themeProvider,
    bool isActive = false,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: isActive 
            ? (themeProvider.isDarkMode ? Colors.blue[700] : Colors.blue[100])
            : (themeProvider.isDarkMode ? Colors.grey[700] : Colors.white),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(
            color: themeProvider.isDarkMode ? Colors.grey[600]! : Colors.grey[300]!,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 18,
              color: isActive 
                ? (themeProvider.isDarkMode ? Colors.white : Colors.blue[700])
                : (themeProvider.isDarkMode ? Colors.white : Colors.black87),
            ),
            SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                color: isActive 
                  ? (themeProvider.isDarkMode ? Colors.white : Colors.blue[700])
                  : (themeProvider.isDarkMode ? Colors.white : Colors.black87),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFormatGuide(String text, ThemeProvider themeProvider) {
    return Padding(
      padding: EdgeInsets.only(bottom: 2),
      child: Text(
        text,
        style: TextStyle(
          fontSize: 12,
          color: themeProvider.isDarkMode ? Colors.grey[400] : Colors.grey[600],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);
    final languageProvider = Provider.of<LanguageProvider>(context);

    return Scaffold(
      backgroundColor: themeProvider.theme.scaffoldBackgroundColor,
      body: SingleChildScrollView(
        child: Column(
          children: [
            Container(
              width: double.infinity,
              decoration: BoxDecoration(
                color: themeProvider.isDarkMode 
                  ? themeProvider.theme.colorScheme.surface 
                  : themeProvider.theme.colorScheme.primary.withOpacity(0.8),
                borderRadius: BorderRadius.only(
                  bottomLeft: Radius.circular(30),
                  bottomRight: Radius.circular(30),
                ),
              ),
              child: Column(
                children: [
                  Padding(
                    padding: EdgeInsets.only(top: 40, left: 16, right: 16),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        IconButton(
                          icon: Icon(Icons.arrow_back, color: themeProvider.isDarkMode ? Colors.white : Colors.white),
                          onPressed: () => Navigator.pop(context),
                        ),
                        if (widget.isEditable)
                          IconButton(
                            icon: Icon(
                              _isEditing ? Icons.save : Icons.edit,
                              color: themeProvider.isDarkMode ? Colors.white : Colors.white,
                            ),
                            onPressed: () {
                              setState(() {
                                _isEditing = !_isEditing;
                                if (!_isEditing) {
                                  _showPreview = false;
                                  // Here you would typically save the changes
                                  // widget.note.description = _textController.text;
                                }
                              });
                            },
                          ),
                      ],
                    ),
                  ),
                  // Note Image
                  if (widget.note.imageUrl != null && widget.note.imageUrl!.isNotEmpty)
                    Container(
                      width: 140,
                      height: 140,
                      margin: EdgeInsets.only(top: 20, bottom: 16),
                      decoration: BoxDecoration(
                        color: themeProvider.isDarkMode 
                          ? Colors.grey[800] 
                          : Colors.white,
                        borderRadius: BorderRadius.circular(20),
                        boxShadow: themeProvider.isDarkMode 
                          ? null 
                          : [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.2),
                                blurRadius: 15,
                                offset: Offset(0, 5),
                              ),
                            ],
                      ),
                      child: ClipRRect(
                        borderRadius: BorderRadius.circular(20),
                        child: CachedNetworkImage(
                          imageUrl: widget.note.imageUrl!,
                          fit: BoxFit.cover,
                          placeholder: (ctx, url) => Container(
                            color: themeProvider.isDarkMode ? Colors.grey[800] : Colors.grey[200],
                            child: Center(
                              child: CircularProgressIndicator(
                                color: themeProvider.isDarkMode ? Colors.white : Colors.grey[600],
                              ),
                            ),
                          ),
                          errorWidget: (ctx, url, err) => Container(
                            color: themeProvider.isDarkMode ? Colors.grey[800] : Colors.grey[200],
                            child: Icon(
                              Icons.broken_image,
                              color: themeProvider.isDarkMode ? Colors.grey[400] : Colors.grey[600],
                              size: 50,
                            ),
                          ),
                        ),
                      ),
                    ),

                  // Note Name
                  Padding(
                    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 20),
                    child: Text(
                      widget.note.name,
                      style: TextStyle(
                        color: themeProvider.isDarkMode 
                          ? Colors.white 
                          : Colors.white,
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  SizedBox(height: 20),
                ],
              ),
            ),
            
            // Content sections
            Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                children: [
                  // Formatting toolbar (only show when editing)
                  if (_isEditing) ...[
                    _buildFormattingToolbar(themeProvider),
                    SizedBox(height: 16),
                  ],
                  
                  // Main content area
                  _buildContentSection(themeProvider, languageProvider),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildContentSection(ThemeProvider themeProvider, LanguageProvider languageProvider) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: themeProvider.isDarkMode 
          ? Color(0xFF1E1E1E) 
          : Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: themeProvider.isDarkMode 
          ? null 
          : [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 10,
                offset: Offset(0, 4),
              ),
            ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(height: 16),
          
          // Content area - either editor or formatted text
          if (_isEditing) ...[
            // Text editor
            TextField(
              controller: _textController,
              maxLines: null,
              keyboardType: TextInputType.multiline,
              style: TextStyle(
                fontSize: 16,
                color: themeProvider.isDarkMode 
                  ? Colors.grey[400] 
                  : Colors.black87,
                height: 1.6,
              ),
              decoration: InputDecoration(
                hintText: 'Enter your text here...\n\nUse **Text** for headings\nUse ## for sub-headings\nUse * for bullet points',
                hintStyle: TextStyle(
                  color: themeProvider.isDarkMode 
                    ? Colors.grey[600] 
                    : Colors.grey[500],
                ),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide(
                    color: themeProvider.isDarkMode 
                      ? Colors.grey[600]! 
                      : Colors.grey[300]!,
                  ),
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide(
                    color: themeProvider.isDarkMode 
                      ? Colors.grey[600]! 
                      : Colors.grey[300]!,
                  ),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide(
                    color: themeProvider.isDarkMode 
                      ? Colors.blue[300]! 
                      : Colors.blue[700]!,
                  ),
                ),
                filled: true,
                fillColor: themeProvider.isDarkMode 
                  ? Colors.grey[800] 
                  : Colors.grey[50],
              ),
            ),
            
            // Preview toggle
            if (_showPreview) ...[
              SizedBox(height: 16),
              Divider(
                color: themeProvider.isDarkMode 
                  ? Colors.grey[600] 
                  : Colors.grey[300],
              ),
              SizedBox(height: 16),
              Text(
                'Preview:',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: themeProvider.isDarkMode 
                    ? Colors.white 
                    : Colors.black87,
                ),
              ),
              SizedBox(height: 8),
              _buildFormattedText(_textController.text, themeProvider),
            ],
          ] else ...[
            // Formatted text display
            _buildFormattedText(widget.note.description ?? '', themeProvider),
          ],
        ],
      ),
    );
  }
}